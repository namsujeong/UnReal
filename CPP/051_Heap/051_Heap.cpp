// 051_Heap.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
#include <conio.h>

// 코드영역에 올라간다.
// 이런 클래스나 int 등등
void Function() 
{

}
// 실행되거나 만들어지지는 않았지만
// 말그대로 동작의 설계도와 같은 역할을 합니다.
// 코드라고 하는겁니다.

// 전역변수는 데이터 영역에 올라가게 됩니다.
// 전역변수
int GlobalValue = 10;

// 전역함수
void GlobalFunction()
{

}

// 객체지향과 섞여 있기 때문에
// 클래스의 내부도 존재하는데 되는데
class Player
{
public:
    // 맴버변수
    int MemberValue;

private:
    // 맴버함수
    void MemberFunction() 
    {

    }

};

class Map 
{

};

class 칼바람나락 : public Map 
{

};

class 소환사의협곡 : public Map
{

};

int main()
{
    // 어떠한 실행될 수 함수 영역 내부에 있으면
    // 그걸 지역이라고 합니다.
    // 지역변수
    int GlobalValue = 0;

    // 이렇게 하면 의구심이 생깁니다.
    // 여태까지의 문법으로 한번 프로그램이 실행되면
    // 프로그램에서 사용하는 메모리의 크기를 바꿀수 있는 문법이 없습니다.

    // lol

    // 동시에 만들어야할 필요가 있나요?
    // Map 칼바람;
    // Map 소환사의협곡;

    // 내가 원할때 원하는 만큼의 메모리를 할당하고
    // 원하는 순간 원하는 클래스를 만들수 있는 이 개념을
    // 동적 바인딩이라고 합니다.
    
    // 여태까지 배운 모든 문법은 전부다 정적 바인딩 문법입니다.
    // 코드가 실행되고 정적으로 모든게 결정나 있다는 뜻입니다.

    // 정적바인딩 
    // => 프로그램이 실행되고 바뀌지 않는 실행코드를 전부다 정적바인딩이라고 합니다.

    // 동적바인딩
    // => 프로그램이 실행되고 프로그래머의 선택과 상황에 따라서 만드는 메모리의 크기나
    // 형태를 마음대로 바꾸는 것을 동적 바인딩 이라고 합니다.

    // 꼭 다시한번 위와 같은 단어들을 공부해서
    // 자신만의 설명방법과 해석을 만들라는 겁니다.

    // 동적바인딩된 메모리가 적재되는 곳이 바로 heap메모리 입니다.

    while (true)
    {
        // getch는 내가 누른 키보드의 키에 따라서
        // 아스키코드의 번호를 리턴해 줍니다.
        int Value = _getch();

        printf_s("%d\n", Value);

        // 이 둘이 모두 만들어져도 상관없는 크기의 스택을 미리 준비해 놓습니다.

        if (Value == 'a')
        {
            printf_s("칼바람 나락을 선택\n");
            칼바람나락 NewMap;
        }
        if (Value == 'b')
        {
            printf_s("소환사의 협곡을 선택\n");
            소환사의협곡 NewMap;
        }

    }
}
