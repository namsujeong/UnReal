// 026_This.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

// this의 존재때문에 클래스 내에서 사용되는 모든 문법이 이에 기반하기 때문에 잘 알고 있어야 한다.

class Player
{
    // 특성은 막는다.
    // 맴버변수는 private으로 공개를 막고
private:
    int Att;
    int Hp;

public:
    // 이 행위는 this과 관련된 비트중 단 1개도 바꾸지 않겠다는것을 
    // 명시해줘야만 const인 변수에서도 호출이 될수가 있습니다.
    // 함수 뒤에 const를 붙여주는 행위는
    // this는 일반적으로 자료형*로 표현되는데 함수의 뒤에 붙은 cosnt는
    // const 자료형* const this를 바꿔버린다.
    void StatusRender() const
    {
        printf_s("----------------------------------------------------\n");
        printf_s("Hp %d\n", this->Hp);
        printf_s("Att %d\n", this->Att);
        printf_s("----------------------------------------------------\n");

        // this = nullptr;
        // this->Hp = 20;
    }

    // 행동은 공개하고
    // 맴버함수는 public으로 공개하는것이 기본적인 
    void Damage(int _Damage) 
    {
        // this는 내부에서 상수의 특성을 띈다.

        // Player*

        // this의 정확한 형은
        // 자료형 * const 
        // this = nullptr;
        this->Hp -= _Damage;
    }

public:
    Player() : Att(10), Hp(100)
    {

    }
};

int main()
{
    // 자료형에 const가 붙었을때 어떻게 되나 봅시다.

    // 앞에 const가 붙는의미는

    // 수정된다 수정안된다의 차이가 뭘까?????
    // 어떤 자료형이 수정된다
    // 어떤 자료형이 수정이 안된다.

    const int Value = 200;

    // const가 붙은 변수는
    // 자신을 이루고 있는 비트의 단 1개의 비트라도 바뀔수 있는
    // 가능성(행동)자체를 막는것이 const의 역할인 겁니다.
    
    // 값을 받아들인다는 행동
    // 행위 자체가 막히게 된다.
    // Value = 200;

    const Player NewPlayer;

    NewPlayer.StatusRender();
    
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
