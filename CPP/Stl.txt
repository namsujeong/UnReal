1. 여러분들이 근본적인 뭔가를 만들필요가 없습니다.
2. c++배우고 있죠?
3. 콘솔창 알아서 띄워주거나 함수를 사용하면 띄워집니다.
   콘솔창의 출력 직접 만들필요가 없어요. 함수를 사용하면 알아서 출력해 줍니다.
   안뜰때가 있다면 이유를 알아야 합니다.

4. 자료구조라는 프로그래밍에 기본에 가까운 녀석입니다.
   잘못된 개발을 배운 사람들은 처음부터 만든것에 굉장한 환상을 가지고 있습니다.
   내가 직접만든 자료구조
   내가 직접만든 콘솔창
   내가 직접만든 자료구조
   내가 직접만든 엔진
   => 이런것들만이 자신의 실력을 증명한다고 생각하는데.

5. 기본적으로 여러분들은 언어 프로그래미나 데이터 관리를 하는 프로그래머가 될려는게 아니고
   게임을 만들수 있는 프로그래머가 되려고 한다면
   빠르게 저런녀석들을 github를 왜쓰죠?
    자료구조
	콘솔창
	자료구조
	엔진
   github에 올라와 있거나 언어적 차원에서 지원되거나
   os차원에서 지원될때가 많습니다.
   응용프로그래머 <= 앱을 만드는 사람입니다.
   특정한 운영체제나 플랫폼에서 뭔가 유저들이 사용할수 있는 프로그램을 만드는 사람입니다.
   윈도우를 만들거나 안드로이드를 <= os 만드는 사람이 아닙니다.

6. 마찬가지고 배열형 자료구조 노드형 자료구조
   이론적으로는 이미 완성되어 있어요.
   이것들을 언어적으로 표현하는것이 자료구조라고 했습니다.
   그런데 프로그래밍을 처음 배우는 사람들이 이것들을 잘 만들수 있을까요?
   혹은 직접만들었다면 => 유지보수도 직접해야 합니다.
   배열을 만들었는데 배열이 불편하고 배열에 무슨함수를 넣어달라고 합니다.
   만들어야 하죠?
   int를 유지보수하라고 하는것과 마찬가지 입니다.
   어떤 것들은 꼭 직접해야하고 다만들어야 합니다.

7. 대부분은 이미 다 만들어져있습니다.
   응용프로그래머가 해야할일은 어떤 클래스 어떤함수가 있는지 알고 빠르게 찾아내야 합니다.
   게임응용프로그래머가 해야할일은 이미 만들어진 클래스들을 가지고
   스킬을 만들고 몬스터를 만드는 일입니다.
   컨텐츠라고 불리는것을 만드는 겁니다.
   여러분들이 직접 배열을 만들고 int의 기능을 개선할필요가 없습니다.

8. 우선 찾아내고 => 사용법을 익히는 것입니다.
   언리얼 엔진 수정할 겁니까?
   깊이 공부하고 싶다면
   => 그대신 이녀석들이 왜 이렇게 동작하는지는 알아야 합니다.
   => 잘못사용했을때 왜 잘못사용했는지에 대한 이유를 알아야 합니다.

9. 선생님이 설명한 이론에 의한 자료구조들은 이미 다 만들어져 있고
   특정 자료형를 보관하는 배열형 시퀸스컨테이너 <= 다 있습니다.
   특정 자료형를 보관하는 노드형 시퀸스컨테이너 <= 다 있습니다.
   특정 자료형를 보관하는 노드형 연관 컨테이너 <= 다 있습니다.
   특정 자료형를 보관하는 노드형 어뎁터 컨테이너 <= 다 있습니다.
   저 클래스들이 무엇인가 찾아내고 이론에 기반해서 기억해야 합니다.
   프로그래머들은 이것들을 거진다 외우는 수준으로 공부합니다.

10. 가장 먼저 배우게될건 std::vector
    배열형 시퀸스컨테이너 => std::vector

